using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Net;
/**
 * This is a sample HTTP Rest client generated by HTTP4e2 (http://www.nextinterfaces.com).
 */
public class HTTP4e2 {

    public static void Main(string[] args) {

        var url = "$httpBean.url";
        var method = "$httpBean.method";
        var body = "$httpBean.body";

        var request = (HttpWebRequest)WebRequest.Create(url);
#foreach( $hKey in $httpBean.cSharpSpecialHeaders.keySet() )
        request.$hKey = "$httpBean.cSharpSpecialHeaders.get($hKey)";
#end
        // custom headers
        var headers = new Dictionary<string, string>()
        {
#foreach( $hKey in $httpBean.headers.keySet() )
            {"$hKey", "$httpBean.headers.get($hKey)"},
#end
        };
        new HTTP4e2().execute(request, method, headers, body);
    }

    class ResponseReader : IResponseReader {
        public void readHeaders(HttpWebResponse response) {
            Console.WriteLine("HTTP/" + response.ProtocolVersion + " " + response.StatusCode);
            Console.WriteLine(response.Headers);
        }
        public void readContent(string responseContent) {
            Console.WriteLine(responseContent);
        }
        public void onFailure(WebException cause) {
            Console.WriteLine(cause);
        }
    }

    private void execute(HttpWebRequest request, string method, IDictionary<string, string> headers, 
                         string body) {

        request.Method = method;
        foreach (KeyValuePair<String, String> h in headers) {
            request.Headers.Add(h.Key, h.Value);
        }

        if (body != null && !("GET".Equals(method) || "HEAD".Equals(method))) {
            using (var streamWriter = new StreamWriter(request.GetRequestStream(), Encoding.UTF8)) {
                streamWriter.Write(body);
                streamWriter.Close();
            }
        }
        read(request, new ResponseReader());
    }

    private void read(HttpWebRequest request, ResponseReader responseReader) {
        try {
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            responseReader.readHeaders(response);

            using (response) {
                var reader = new StreamReader(response.GetResponseStream());
                responseReader.readContent(reader.ReadToEnd());
                reader.Close();
            }
            response.Close();
        } catch (WebException e) {
            responseReader.onFailure(e);
        }
    }

    interface IResponseReader {
    
        void readHeaders(HttpWebResponse response);
        
        void readContent(string responseContent);
        
        void onFailure(WebException cause);
    }
}

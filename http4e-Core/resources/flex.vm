<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * The MIT License
 *
 * Copyright (c) 2008
 * Dustin R. Callaway
 * http://www.sourcestream.com/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
 
 /*
  * This is a sample Flex/ActionSript HTTP Rest client generated by HTTP4e2 (http://www.nextinterfaces.com).
  * 
  * README. This client is based on RestHttpService (http://code.google.com/p/resthttpservice/). To setup:
  *   1. Import RestHttpService-xx.swc to your project libs
  *   2. Create HTTP4e2.mxml and paste this content
  *   4. Build the project and execute the created HTTP4e2.swf
  * 
  * Alternatively you can download the project from http://code.google.com/p/flex-actionscript-http4e-rest-client/ 
  */
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:rest="com.sourcestream.flex.http.*">

    <mx:Script><![CDATA[
        import mx.controls.Alert;
        import com.sourcestream.flex.http.HttpEvent;
        import com.sourcestream.flex.http.RestHttpService;
        
        function getMethod():String {        
			return "$httpBean.method";
        }
		
        function getHost():String {        
			return "$httpBean.domain";
        }
		
        function getPort():int {        
			return $httpBean.nonullPort;
        }
		
        function isSecure():Boolean {        
			return $httpBean.secure;
        }
        
        function getURI():String {        
			return "$httpBean.path";
        }
        
        function getBody():String {        
			return "$httpBean.body";
        }
		
        function getContentType():String {        
			return "$httpBean.contentType";
        }
		
		/**
		 * Use either getParams() or getURI() to pass the queryString
		 */
        function getParams():Dictionary {
			//var urlParams:Dictionary = new Dictionary();
			//urlParams["a"] = "aaa";
			//urlParams["b"] = "bb";
			//return urlParams;
			return null;
###foreach( $hKey in $httpBean.params.keySet() )
##			urlParams["$hKey"] = "$httpBean.params.get($hKey)";
###end			
		}

#if (!$httpBean.headers.empty)
        /*
         * The following headers cannot be send due to Flex's limitations.
         * Consider using parameters instead.
         */
	#foreach( $hKey in $httpBean.headers.keySet() )
        //{"$hKey" : "$httpBean.headers.get($hKey)"};
	#end
#else
#end  

        function dataHandler(event:HttpEvent):void {
            Alert.show( "Executed " + getMethod() + " " + getHost() + ":" + getPort() + getURI() + "\n\nResponse: " + 
            event.response.statusCode + " " + event.response.statusMessage + "\n\n" +
            event.data );
        }

        function faultHandler(event:HttpEvent):void {
            Alert.show( "Executed " + getMethod() + " " + getHost() + ":" + getPort() + getURI() + "\n\nResponse: " + 
            event.response.statusCode + " " + event.response.statusMessage + "\n\n" +
            event.text );
        }       
                
        /**
         * This method invokes RestHttpService class from ActionScript.
         */
        function doActionScriptClient():void {
            //instantiate RestHttpService using host name or IP and port (add third paramater with value "true" for SSL)
            var http:RestHttpService = new RestHttpService(getHost(), getPort(), isSecure());

            //add a listener to be invoked when data is received
            http.addEventListener(RestHttpService.EVENT_RESULT, dataHandler);

            //add a listener to be invoked when an error occurs
            http.addEventListener(RestHttpService.EVENT_FAULT, faultHandler);

            //use appropriate do<Action>() method to call the REST service (i.e., for GET requests, use doGet() method)
            $httpBean.actionScriptService
        }
        
        function doFlexClient():void {
            flexHttpClient.send(getBody(), getParams());
        }

        ]]>
    </mx:Script>

    <!--
        //This method invokes RestHttpService class from Flex.
    -->
    <rest:RestHttpService id="flexHttpClient" server="{getHost()}" port="{getPort()}" 
    	method="{getMethod()}" 
    	resource="{getURI()}" 
    	contentType="{getContentType()}" 
    	result="dataHandler(event)" 
    	fault="faultHandler(event)"/>

    <mx:Button click="doFlexClient()" label="Execute HTTP4e2"/>

</mx:Application>
